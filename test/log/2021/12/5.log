(def sql "update categories set categoryname = '瓜子' where description <> ''")
(my-update/get_update_obj ignite 1 (str/lower-case sql))
(def update_obj (my-update/get_update_obj ignite 1 (str/lower-case sql)))

(def table_name (-> update_obj :table_name))

(def sql (-> update_obj :sql))

(def items (-> update_obj :items))

(def pk_lst (-> update_obj :pk_lst))

(def it (.iterator (.query (.cache ignite (format "f_%s" "categories")) (doto (SqlFieldsQuery. sql)
                                                                            (.setLazy true)))))

(defn get_key_obj [^Ignite ignite ^String table_name row pk_lst]
             (if-let [keyBuilder (.builder (.binary ignite) (KvSql/getKeyType ignite (format "f_%s" table_name)))]
                 (loop [[f & r] row [f_pk & r_pk] pk_lst kp keyBuilder lst_kv (ArrayList.)]
                     (if (and (some? f) (some? f_pk))
                         (let [key (-> f_pk :item_name) value (my-lexical/get_jave_vs (-> f_pk :item_type) f)]
                             (recur r r_pk (doto kp (.setField key value)) (doto lst_kv (.add (MyKeyValue. key value)))))
                         [(.build kp) lst_kv]))))
(defn get_value_obj [^Ignite ignite ^String table_name items]
               (if-let [valueBuilder (.builder (.binary ignite) (KvSql/getValueType ignite (format "f_%s" table_name)))]
                   (loop [[f & r] items vp valueBuilder lst_kv (ArrayList.)]
                       (if (some? f)
                           (let [key (-> f :item_name) value (my-lexical/get_jave_vs (-> f :type) (my-insert/get_plus_value_tokens ignite (-> f :item_obj)))]
                               (recur r (doto vp (.setField key value)) (doto lst_kv (.add (MyKeyValue. key value)))))
                           [(.build vp) lst_kv]))))
(defn get_cache_pk [^Ignite ignite ^String table_name it pk_lst]
              (loop [itr it lst []]
                  (if (.hasNext itr)
                      (if-let [row (.next itr)]
                          (cond (= (count pk_lst) 1) (recur itr (conj lst (my-lexical/get_jave_vs (-> (first pk_lst) :item_type) (.get row 0))))
                                (> (count pk_lst) 1) (recur itr (conj lst (get_key_obj ignite table_name row pk_lst)))
                                :else
                                (throw (Exception. "表没有主键！"))
                                ))
                      lst)))
(defn get_cache_data [^Ignite ignite ^String table_name it pk_lst items]
                (if-let [lst_pk (get_cache_pk ignite table_name it pk_lst)]
                    (loop [[f_pk & r_pk] lst_pk ms items lst_rs []]
                        (if (some? f_pk)
                            (if (vector? f_pk)
                                (let [[pk kv_pk] f_pk [vs kv_vs] (get_value_obj ignite table_name ms) log_id (.incrementAndGet (.atomicSequence ignite "my_log" 0 true))]
                                    (recur r_pk ms (concat lst_rs [(MyCacheEx. (.cache ignite (format "f_%s" table_name)) pk vs (SqlType/UPDATE))
                                                                   (MyCacheEx. (.cache ignite "my_log") log_id (MyLog. log_id table_name (MyCacheExUtil/objToBytes (MyLogCache. (format "f_%s" table_name) kv_pk kv_vs (SqlType/UPDATE)))) (SqlType/INSERT))])))
                                (let [[vs kv_vs] (get_value_obj ignite table_name ms) log_id (.incrementAndGet (.atomicSequence ignite "my_log" 0 true))]
                                    (recur r_pk ms (concat lst_rs [(MyCacheEx. (.cache ignite (format "f_%s" table_name)) f_pk vs (SqlType/UPDATE))
                                                                   (MyCacheEx. (.cache ignite "my_log") log_id (MyLog. log_id table_name (MyCacheExUtil/objToBytes (MyLogCache. (format "f_%s" table_name) f_pk kv_vs (SqlType/UPDATE)))) (SqlType/INSERT))]))))
                            lst_rs))))

(def it (.iterator (.query (.cache ignite (format "f_%s" "categories")) (doto (SqlFieldsQuery. sql)
                                                                            (.setLazy true)))))
(def lst_pk (get_cache_pk ignite table_name it pk_lst))






























































