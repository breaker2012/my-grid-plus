(require
    '[org.gridgain.plus.ddl.my-create-table :as my-create-table]
    '[org.gridgain.plus.ddl.my-alter-table :as my-alter-table]
    '[org.gridgain.plus.ddl.my-create-index :as my-create-index]
    '[org.gridgain.plus.ddl.my-drop-index :as my-drop-index]
    '[org.gridgain.plus.ddl.my-drop-table :as my-drop-table]
    '[org.gridgain.plus.ddl.my-create-dataset :as my-create-dataset]
    '[org.gridgain.plus.ddl.my-alter-dataset :as my-alter-dataset]
    '[org.gridgain.plus.ddl.my-drop-dataset :as my-drop-dataset]
    '[org.gridgain.plus.dml.my-select :as my-select]
    '[org.gridgain.plus.dml.my-select-plus :as my-select-plus]
    '[org.gridgain.plus.dml.my-insert :as my-insert]
    '[org.gridgain.plus.dml.my-update :as my-update]
    '[org.gridgain.plus.dml.my-delete :as my-delete]
    '[org.gridgain.plus.dml.my-trans :as my-trans]
    '[org.gridgain.plus.dml.my-scenes :as my-scenes]
    '[org.gridgain.plus.dml.my-scenes-util :as my-scenes-util]
    '[org.gridgain.plus.dml.select-lexical :as my-lexical]
    '[org.gridgain.plus.dml.my-expression :as my-expression]
    '[org.gridgain.plus.context.my-context :as my-context]
    '[org.gridgain.plus.init.plus-init-sql :as plus-init-sql]
    '[org.gridgain.plus.init.plus-init :as plus-init]
    '[org.gridgain.plus.tools.my-util :as my-util]
    '[clojure.core.reducers :as r]
    '[clojure.string :as str]
    '[clojure.walk :as w])
(import (org.apache.ignite Ignite IgniteCache)
        (org.apache.ignite.internal IgnitionEx)
        (com.google.common.base Strings)
        (cn.plus.model MyCacheEx MyKeyValue MyLogCache SqlType MyLog)
        (org.tools MyConvertUtil KvSql)
        (cn.plus.model MyCacheEx MyKeyValue MyLogCache SqlType DdlLog DataSetDdlLog)
        (cn.plus.model.ddl MyDataSet MyDatasetTable MyDatasetRealTable MyDatasetTablePK MyDeleteViews MyInsertViews MySelectViews MyTable MyTableIndex MyTableIndexItem MyTableItem MyTableItemPK MyTableObj MyUpdateViews MyViewObj ViewOperateType ViewType)
        (org.gridgain.dml.util MyCacheExUtil)
        (cn.plus.model.db MyScenesCache)
        (org.apache.ignite.configuration CacheConfiguration)
        (org.apache.ignite.cache CacheMode CacheAtomicityMode)
        (org.apache.ignite.cache.query FieldsQueryCursor SqlFieldsQuery)
        (org.apache.ignite.binary BinaryObjectBuilder BinaryObject)
        (org.gridgain.ddl MyCreateTableUtil MyDdlUtil)
        (java.util List ArrayList Date Iterator)
        (java.sql Timestamp)
        (java.math BigDecimal)
        (org.tools MyTools)
        (org.gridgain MyParamsUtil)
        )

(def ignite (IgnitionEx/start "/Users/chenfei/Documents/Java/MyGridGain/my-grid-plus/resources/default-config.xml"))


(def sql_line (str/lower-case "update OrderDetails set Discount = 12, UnitPrice = Discount * 2 + Quantity where OrderID = 10248"))
(my-update/get_update_obj ignite 1 sql_line)
(def update_obj (my-update/get_update_obj ignite 1 sql_line))

(def table_name (-> update_obj :table_name))

(def sql (-> update_obj :sql))

(def items (-> update_obj :items))

(def pk_lst (-> update_obj :pk_lst))

(def dic (-> update_obj :dic))

(def lst (-> update_obj :lst))

(def it (.iterator (.query (.cache ignite (format "f_%s" "orderdetails")) (doto (SqlFieldsQuery. sql)
                                                                            (.setLazy true)))))

(defn item_value_tokens [^Ignite ignite lst_tokens ^BinaryObject binaryObject dic]
                   (cond (contains? lst_tokens :item_name) (my-expression/item_type_binaryObj (-> lst_tokens :java_item_type) (-> lst_tokens :item_name) binaryObject dic)
                         (contains? lst_tokens :parenthesis) (my-expression/mid_to_forwrod_binaryObject ignite binaryObject dic (reverse (-> lst_tokens :parenthesis)))
                         (contains? lst_tokens :operation) (my-expression/mid_to_forwrod_binaryObject ignite binaryObject dic (reverse (-> lst_tokens :operation)))
                         ))
(defn get_key_obj [^Ignite ignite ^String table_name row pk_lst]
             (if-let [keyBuilder (.builder (.binary ignite) (KvSql/getKeyType ignite (format "f_%s" table_name)))]
                 (loop [[f & r] row [f_pk & r_pk] pk_lst kp keyBuilder]
                     (if (and (some? f) (some? f_pk))
                         (recur r r_pk (doto kp (.setField (format "%s_pk" (-> f_pk :item_name)) (my-lexical/get_jave_vs (-> f_pk :item_type) f))))
                         (.build kp)))))
(defn get_value_obj [^Ignite ignite ^String table_name pk items dic]
               (if-let [valueBinaryObject (.toBuilder (.get (.withKeepBinary (.cache ignite (format "f_%s" table_name))) pk))]
                   (loop [[f & r] items vp valueBinaryObject]
                       (if (some? f)
                           (recur r (doto vp (.setField (-> f :item_name) (my-lexical/get_jave_vs (-> f :type) (item_value_tokens ignite (-> f :item_obj) (.build vp) dic)))))
                           (.build vp)))))
(defn get_cache_pk [^Ignite ignite ^String table_name it pk_lst]
              (loop [itr it lst []]
                  (if (.hasNext itr)
                      (if-let [row (.next itr)]
                          (cond (= (count pk_lst) 1) (recur itr (conj lst (my-lexical/get_jave_vs (-> (first pk_lst) :item_type) (.get row 0))))
                                (> (count pk_lst) 1) (recur itr (conj lst (get_key_obj ignite table_name row pk_lst)))
                                :else
                                (throw (Exception. "表没有主键！"))
                                ))
                      lst)))
(defn get_cache_data [^Ignite ignite ^String table_name it pk_lst items dic]
                (if-let [lst_pk (get_cache_pk ignite table_name it pk_lst)]
                    (loop [[f_pk & r_pk] lst_pk ms items lst_rs []]
                        (if (some? f_pk)
                            (recur r_pk ms (conj lst_rs (MyCacheEx. (.cache ignite (format "f_%s" table_name)) f_pk (get_value_obj ignite table_name f_pk ms dic) (SqlType/UPDATE))))
                            lst_rs))))

(def it (.iterator (.query (.cache ignite (format "f_%s" "orderdetails")) (doto (SqlFieldsQuery. sql)
                                                                            (.setLazy true)))))

(def lst_pk (get_cache_pk ignite table_name it pk_lst))
(def f_pk (first lst_pk))
(def pk (first f_pk))
(def kv_pk (second f_pk))

; (item_value_tokens ignite (-> (second (-> update_obj :items)) :item_obj) (.get (.withKeepBinary (.cache ignite "f_orderdetails")) pk) (-> update_obj :dic))

(def tokens (-> (second (-> update_obj :items)) :item_obj))

(def binaryObject (.get (.withKeepBinary (.cache ignite "f_orderdetails")) pk))


(my-expression/mid_to_forwrod_binaryObject ignite binaryObject dic (reverse (-> tokens :operation)))












































































