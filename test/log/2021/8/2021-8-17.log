(require
    '[org.gridgain.plus.dml.my-select :as my-select]
    '[org.gridgain.plus.dml.my-insert :as my-insert]
    '[org.gridgain.plus.dml.select-lexical :as my-lexical]
    '[org.gridgain.plus.context.my-context :as my-context]
    '[clojure.core.reducers :as r]
    '[clojure.string :as str]
    '[clojure.walk :as w])
(import (org.apache.ignite Ignite IgniteCache)
                     (org.apache.ignite.internal IgnitionEx)
                     (com.google.common.base Strings)
                     (org.tools MyConvertUtil MySqlFunc)
                     (cn.plus.model MyCacheEx MyKeyValue MyLogCache SqlType)
                     (cn.plus.tools KvSql)
                     (org.apache.ignite.configuration CacheConfiguration)
                     (org.apache.ignite.cache CacheMode CacheAtomicityMode)
                     (org.apache.ignite.cache.query FieldsQueryCursor SqlFieldsQuery)
                     (org.gridgain.meta.cache MyContextCacheUtil)
                     (org.gridgain.mydml MyInsertUtil)
                     (java.util ArrayList Date)
                     (java.sql Timestamp)
        )
=> nil
=> org.gridgain.meta.cache.MyContextCacheUtil
(my-select/get-token (my-lexical/to-back "a+b*c + f(c, d + e)"))
=>
{:operation ({:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "*"}
             {:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:func-name "f",
              :lst_ps ({:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}
                       {:comma_symbol ","}
                       {:operation ({:table_alias "", :item_name "d", :item_type "", :java_item_type nil, :const false}
                                    {:operation_symbol "+"}
                                    {:table_alias "", :item_name "e", :item_type "", :java_item_type nil, :const false})})})}
(my-select/get-token (my-lexical/to-back "a+b*c + f1(c1, d + e)"))
=>
{:operation ({:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "*"}
             {:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:func-name "f1",
              :lst_ps ({:table_alias "", :item_name "c1", :item_type "", :java_item_type nil, :const false}
                       {:comma_symbol ","}
                       {:operation ({:table_alias "", :item_name "d", :item_type "", :java_item_type nil, :const false}
                                    {:operation_symbol "+"}
                                    {:table_alias "", :item_name "e", :item_type "", :java_item_type nil, :const false})})})}
(my-select/get-token (my-lexical/to-back "a+b*c + f1   (   c1, d + e)"))
=>
{:operation ({:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "*"}
             {:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:func-name "f1",
              :lst_ps ({:table_alias "", :item_name "c1", :item_type "", :java_item_type nil, :const false}
                       {:comma_symbol ","}
                       {:operation ({:table_alias "", :item_name "d", :item_type "", :java_item_type nil, :const false}
                                    {:operation_symbol "+"}
                                    {:table_alias "", :item_name "e", :item_type "", :java_item_type nil, :const false})})})}
(my-select/get-token (my-lexical/to-back "a+b*c + f f1   (   c1, d + e)"))
=>
{:operation ({:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "*"}
             {:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             nil)}
(my-select/get-token (my-lexical/to-back "a+b*c"))
=>
{:operation ({:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "+"}
             {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}
             {:operation_symbol "*"}
             {:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false})}
(def lst (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation))
=> #'core/lst
(println lst)
({:table_alias , :item_name a, :item_type , :java_item_type nil, :const false} {:operation_symbol +} {:table_alias , :item_name b, :item_type , :java_item_type nil, :const false} {:operation_symbol *} {:table_alias , :item_name c, :item_type , :java_item_type nil, :const false})
=> nil
(def lst (reverse (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation)))
=> #'core/lst
(println lst)
({:table_alias , :item_name c, :item_type , :java_item_type nil, :const false} {:operation_symbol *} {:table_alias , :item_name b, :item_type , :java_item_type nil, :const false} {:operation_symbol +} {:table_alias , :item_name a, :item_type , :java_item_type nil, :const false})
=> nil
; 判断符号优先级
(defn is-symbol-priority [f s]
    (cond (or (= f "*") (= f "/")) true
          (and (or (= f "+") (= f "-")) (or (= s "+") (= s "-"))) true
          :else
          false))

; 将运算表达式中缀转前缀
(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                    ; 若符号栈为空，则符号直接入栈
                                                    (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                    ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                    (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r stack_number (conj stack_symbol f))
                                                    ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                    :else
                                                    (recur r [{:keyword "("} f stack_number {:keyword ")"}] (pop stack_symbol))))
        (if (= (count stack_symbol) 1) [{:keyword "("} (pop stack_symbol) stack_number {:keyword ")"}]
                                       (throw (Exception. "表达式有错误")))))
=> #'core/is-symbol-priority
=> #'core/mid_to_forwrod
(mid_to_forwrod (my-select/get-token (my-lexical/to-back "a+b*c")) [] [])
=> nil
(mid_to_forwrod (def lst (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation)) [] [])
Execution error (IllegalArgumentException) at core/mid-to-forwrod (form-init2434141777113074509.clj:9).
Don't know how to create ISeq from: clojure.lang.Var
; 判断符号优先级
(defn is-symbol-priority [f s]
    (cond (or (= f "*") (= f "/")) true
          (and (or (= f "+") (= f "-")) (or (= s "+") (= s "-"))) true
          :else
          false))

; 将运算表达式中缀转前缀
(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                    ; 若符号栈为空，则符号直接入栈
                                                    (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                    ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                    (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r stack_number (conj stack_symbol f))
                                                    ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                    :else
                                                    (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (pop stack_symbol) stack_number {:keyword ")"}])
                                       (throw (Exception. "表达式有错误")))))
=> #'core/is-symbol-priority
=> #'core/mid_to_forwrod
(mid_to_forwrod (def lst (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation)) [] [])
Execution error (IllegalArgumentException) at core/mid-to-forwrod (form-init2434141777113074509.clj:9).
Don't know how to create ISeq from: clojure.lang.Var
(mid_to_forwrod (def lst (get (my-select/get-token (my-lexical/to-back "a+b")) :operation)) [] [])
Execution error (IllegalArgumentException) at core/mid-to-forwrod (form-init2434141777113074509.clj:9).
Don't know how to create ISeq from: clojure.lang.Var
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b")) :operation) [] [])
=>
({:keyword "("}
 []
 [{:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
  {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}]
 {:keyword ")"})
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
Execution error at core/mid-to-forwrod (form-init2434141777113074509.clj:20).
表达式有错误
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b")) :operation) [] [])
=>
({:keyword "("}
 []
 [{:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
  {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}]
 {:keyword ")"})
(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                  ; 若符号栈为空，则符号直接入栈
                                                  (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                  (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                  :else
                                                  (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (peek stack_symbol) stack_number {:keyword ")"}])
                                       (throw (Exception. "表达式有错误")))))
=> #'core/mid_to_forwrod
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b")) :operation) [] [])
=>
({:keyword "("}
 {:operation_symbol "+"}
 [{:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
  {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}]
 {:keyword ")"})
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
Execution error at core/mid-to-forwrod (form-init2434141777113074509.clj:12).
表达式有错误
(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                  ; 若符号栈为空，则符号直接入栈
                                                  (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                  (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                  :else
                                                  (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (peek stack_symbol) stack_number {:keyword ")"}])
                                       (throw (println stack_symbol)))))
=> #'core/mid_to_forwrod
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
[{:operation_symbol +} {:operation_symbol *}]
Execution error (NullPointerException) at core/mid-to-forwrod (form-init2434141777113074509.clj:13).
null
(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                  ; 若符号栈为空，则符号直接入栈
                                                  (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                  (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                  :else
                                                  (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (peek stack_symbol) stack_number {:keyword ")"}])
                                       stack_number)))
=> #'core/mid_to_forwrod
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
=>
[{:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
 {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}
 {:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}]
(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                  ; 若符号栈为空，则符号直接入栈
                                                  (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                  (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                  :else
                                                  (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (peek stack_symbol) stack_number {:keyword ")"}])
                                       stack_symbol)))
=> #'core/mid_to_forwrod
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
=> [{:operation_symbol "+"} {:operation_symbol "*"}]

(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                  ; 若符号栈为空，则符号直接入栈
                                                  (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                  (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))
                                                  ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                  :else
                                                  (recur r stack_number (conj stack_symbol f))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (peek stack_symbol) stack_number {:keyword ")"}])
                                       stack_symbol)))
=> #'core/mid_to_forwrod
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
=> []

(defn mid_to_forwrod [[f & r] stack_number stack_symbol]
    (if (some? f)
        (cond (contains? f :item_name) (recur r (conj stack_number f) stack_symbol)
              (contains? f :operation_symbol) (cond
                                                  ; 若符号栈为空，则符号直接入栈
                                                  (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                  ; 若符号栈栈顶优先级小于或等于，要入栈的符号，则符号直接入栈
                                                  (is-symbol-priority (-> f :operation_symbol) (-> (peek stack_symbol) :operation_symbol)) (recur r (concat [{:keyword "("} f stack_number {:keyword ")"}]) (pop stack_symbol))
                                                  ; 若符号栈栈顶优先级小于，要入栈的符号，则符号栈栈顶弹出压入数字栈形成前缀
                                                  :else
                                                  (recur r stack_number (conj stack_symbol f))))
        (if (= (count stack_symbol) 1) (concat [{:keyword "("} (peek stack_symbol) stack_number {:keyword ")"}])
                                       stack_number)))
=> #'core/mid_to_forwrod
(mid_to_forwrod (get (my-select/get-token (my-lexical/to-back "a+b*c")) :operation) [] [])
=>
({:table_alias "", :item_name "c", :item_type "", :java_item_type nil, :const false}
 {:keyword "("}
 {:operation_symbol "*"}
 [{:table_alias "", :item_name "a", :item_type "", :java_item_type nil, :const false}
  {:table_alias "", :item_name "b", :item_type "", :java_item_type nil, :const false}]
 {:keyword ")"})

 https://www.cnblogs.com/tech-bird/p/3971555.html


 ; 判断符号优先级
 ; f symbol 的优先级大于等于 s 返回 true 否则返回 false
 (defn is-symbol-priority [f s]
     (cond (or (= (-> f :operation_symbol) "*") (= (-> f :operation_symbol) "/")) true
           (and (or (= (-> f :operation_symbol) "+") (= (-> f :operation_symbol) "-")) (or (= (-> f :operation_symbol) "+") (= (-> f :operation_symbol) "-"))) true
           :else
           false))
 => #'core/is-symbol-priority
 (def lst [1 2 3 4 5])
 => #'core/lst
 (pop lst)
 => [1 2 3 4]
 (pop (pop lst))
 => [1 2 3]
 (conj (pop (pop lst)) "吴大富")
 => [1 2 3 "吴大富"]
 ; 将运算表达式中缀转前缀
 (defn mid_to_forwrod [[f & r] stack_number stack_symbol]
     (if (some? f)
         (cond (contains? f :operation_symbol) (cond
                                                   ; 若符号栈为空，则符号直接压入符号栈
                                                   (= (count stack_symbol) 0) (recur r stack_number (conj stack_symbol f))
                                                   ; f 符号的优先级高于或等于符号栈栈顶的优先级，则直接入栈
                                                   (is-symbol-priority f (peek stack_symbol)) (recur r stack_number (conj stack_symbol f))
                                                   ; f 符号的优先级低于栈顶的优先级，则将符号栈顶，弹出参与计算后，在压入，数据栈
                                                   :else
                                                   (let [first_item (peek stack_number) second_item (peek (pop stack_number)) top_symbol (peek stack_symbol)]
                                                       (recur r (conj (pop (pop stack_number)) (concat [top_symbol first_item second_item])) (conj stack_symbol f)))
                                                   )
               :else
               (recur r (conj stack_number f) stack_symbol))
         (if (= (count stack_symbol) 1) (concat [{:keyword "("} (pop stack_symbol) stack_number {:keyword ")"}])



    =>
    #org.gridgain.plus.dml.my_insert.insert_obj{:table_name "categories",
                                                :kv_seq (#org.gridgain.plus.dml.my_insert.insert_kv{:item_name "description",
                                                                                                    :iten_value "3"}
                                                         #org.gridgain.plus.dml.my_insert.insert_kv{:item_name "categoryname",
                                                                                                    :iten_value "'John Doe'"}
                                                         #org.gridgain.plus.dml.my_insert.insert_kv{:item_name "categoryid",
                                                                                                    :iten_value "1"})}
    (my-insert/get_pk_data ignite "categories")
    =>
    {:pk ({:column_name "categoryid", :column_type "INTEGER", :pkid true, :auto_increment false}),
     :data ({:column_name "categoryname", :column_type "VARCHAR(15)", :pkid false, :auto_increment false}
            {:column_name "description", :column_type "VARCHAR", :pkid false, :auto_increment false}
            {:column_name "picture", :column_type "VARCHAR", :pkid false, :auto_increment false})}
    (-> (my-insert/get_pk_data ignite "categories") :pk)
    => ({:column_name "categoryid", :column_type "INTEGER", :pkid true, :auto_increment false})
    (defn get_pk_no_auto_sigle [[f & r] pk_column_name]
        (if (some? f)
            (if (my-lexical/is-eq? (:item_name f) pk_column_name)
                (:iten_value f)
                (recur r pk_column_name)
                )))
    => #'core/get_pk_no_auto_sigle                                    (throw (Exception. "表达式有错误")))))


    (def sql "INSERT INTO categories (categoryid, categoryname, description) VALUES (1, 'John Doe', 3)")