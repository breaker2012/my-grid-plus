(require
    '[org.gridgain.plus.dml.my-select :as my-select]
    '[org.gridgain.plus.dml.select-lexical :as my-lexical]
    '[org.gridgain.plus.context.my-context :as my-context]
    '[clojure.core.reducers :as r]
    '[clojure.string :as str]
    '[clojure.walk :as w])
(import (org.apache.ignite Ignite IgniteCache)
        (org.apache.ignite.internal IgnitionEx)
        (com.google.common.base Strings)
        (org.apache.ignite.configuration CacheConfiguration)
        (org.apache.ignite.cache CacheMode)
        (org.apache.ignite.cache.query FieldsQueryCursor SqlFieldsQuery)
        (org.gridgain.meta.cache MyContextCacheUtil)
        )

(def ignite (IgnitionEx/start "/Users/chenfei/Documents/Java/MyPlus/my-plus-deploy/src/main/resources/default-config.xml"))

(def sql "select distinct a.empno, func_a(m_c_t.id), round(nvl(sum(nvl(b.data,0)),0)*0.12,2)  as acc_dir_sal, (select emp_name from staff_info s, scenes_b(1, 2) as sb, city ct where ct.id > 10 and empno=a.empno and sb.id > 0) as emp_name from agent_info a, staff_info b, city m_c_t, (select emp_name from my_staff_info where empno=a.empno) where (((c_rank_type = '03' and mgrno = c_empno) or a.empno = c_empno) or ((c_rank_type = '04' and chiefno = c_empno) or a.empno = c_empno)) and ((a.end_date is null or a.end_date > p_sdate ) and a.start_date <= p_edate) and p_date between start_date and ((a.end_date is null or a.end_date > p_sdate ) and a.start_date <= p_edate) and a.id exists (select 1 from staff_info c, cs_prem_info b where b.busi_src = 'P' and b.j_date >= p_sdate and b.j_date < p_edate+1 and b.s_flag = '01' and c.empno = b.agentno and substr(c.empno,1,4) not in ('1EC0','1008') and c.emp_name<>'AUTOUNDW' and ((b.PLAN_CODE = 'A57' and b.PREM_TIMES =1) or b.PLAN_CODE <> 'A57') and a.empno = c.empno group by b.agentno having sum(b.tot_prem) >= 1000)")
(my-select/get_my_ast ignite 1 sql)

(get (get (nth (my-select/get_my_ast ignite 1 sql) 0) :sql_obj) :query-items)
(-> (nth (my-select/get_my_ast ignite 1 sql) 0) :sql_obj :query-items)

(def query_item (-> (nth (my-select/get_my_ast ignite 1 sql) 0) :sql_obj :query-items))

(declare item-to-line table-to-line func-to-line select-to-sql token-to-sql map-token-to-sql)

; 转换成查询字符串
(defn item-to-line [m]
    (let [{table_alias :table_alias item_name :item_name alias :alias} m]
        (cond
            (and (not (= table_alias "")) (not (= alias ""))) (str/join [table_alias "." item_name " as " alias])
            (and (not (= table_alias "")) (= alias "")) (str/join [table_alias "." item_name])
            (and (= table_alias "") (= alias "")) item_name
            )))

(defn table-to-line [m] ())

(defn func-to-line [m] ())

(defn select-to-sql [ignite group_id ast]
    (if (and (some? ast) (map? ast))
        (when-let [{query-items :query-items table-items :table-items where-items :where-items group-by :group-by having :having order-by :order-by limit :limit} ast]
            (cond (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items))
                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (empty having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (empty having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["limit"] (token-to-sql ignite group_id limit))

                  ))))


(defn token-to-sql [ignite group_id m]
    (if (some? m)
        (cond (instance? clojure.lang.LazySeq m) (map (partial token-to-sql ignite group_id) m)
              (map? m) (map-token-to-sql ignite group_id m))))

; map token to sql
(defn map-token-to-sql [ignite group_id m]
    (if (some? m)
        (cond
            (contains? m :sql_obj) (if (not (nil? (get m :sql_obj))) (select-to-sql ignite group_id (get m :sql_obj)) (throw (Exception. "select 语句错误！")))
            (and (contains? m :func-name) (contains? m :lst_ps)) (func-to-line m)
            (contains? m :and_or_symbol) (get m :and_or_symbol)
            (contains? m :comparison_symbol) (get m :comparison_symbol)
            (contains? m :in_symbol) (get m :in_symbol)
            (contains? m :comma_symbol) (get m :comma_symbol)
            (contains? m :item_name) (item-to-line m)
            (contains? m :table_name) (table-to-line m)
            (contains? m :parenthesis) (concat ["("] (token-to-sql ignite group_id (get m :parenthesis)) [")"])
            )))


(declare item-to-line table-to-line func-to-line select-to-sql token-to-sql map-token-to-sql)

; 转换成查询字符串
(defn item-to-line [m]
    (let [{table_alias :table_alias item_name :item_name alias :alias} m]
        (cond
            (and (not (= table_alias "")) (not (= alias ""))) (str/join [table_alias "." item_name " as " alias])
            (and (not (= table_alias "")) (= alias "")) (str/join [table_alias "." item_name])
            (and (= table_alias "") (= alias "")) item_name
            )))

(defn table-to-line [m] ())

(defn func-to-line [m] ())

(defn select-to-sql [ignite group_id ast]
    (if (and (some? ast) (map? ast))
        (when-let [{query-items :query-items table-items :table-items where-items :where-items group-by :group-by having :having order-by :order-by limit :limit} ast]
            (cond (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items))
                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (some? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (some? where-items) (some? group-by) (empty? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["group by"] (token-to-sql ignite group_id group-by) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (some? where-items) (empty? group-by) (empty? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["where"] (token-to-sql ignite group_id where-items) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (empty having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (empty? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (empty having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (empty? where-items) (some? group-by) (some? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["group by"] (token-to-sql ignite group_id group-by) ["having"] (token-to-sql ignite group_id having) ["limit"] (token-to-sql ignite group_id limit))

                  (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (some? order-by) (empty? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["order by"] (token-to-sql ignite group_id order-by))
                  (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (some? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["order by"] (token-to-sql ignite group_id order-by) ["limit"] (token-to-sql ignite group_id limit))
                  (and (some? query-items) (some? table-items) (empty? where-items) (empty? group-by) (empty? having) (empty? order-by) (some? limit)) (concat ["select"] (token-to-sql ignite group_id query-items) ["from"] (token-to-sql ignite group_id table-items) ["limit"] (token-to-sql ignite group_id limit))

                  ))))


(defn token-to-sql [ignite group_id m]
    (if (some? m)
        (cond (instance? clojure.lang.LazySeq m) (map (partial token-to-sql ignite group_id) m)
              (map? m) (map-token-to-sql ignite group_id m))))

; map token to sql
(defn map-token-to-sql [ignite group_id m]
    (if (some? m)
        (cond
            (contains? m :sql_obj) (if (not (nil? (get m :sql_obj))) (select-to-sql ignite group_id (get m :sql_obj)) (throw (Exception. "select 语句错误！")))
            (and (contains? m :func-name) (contains? m :lst_ps)) (func-to-line m)
            (contains? m :and_or_symbol) (get m :and_or_symbol)
            (contains? m :comparison_symbol) (get m :comparison_symbol)
            (contains? m :in_symbol) (get m :in_symbol)
            (contains? m :comma_symbol) (get m :comma_symbol)
            (contains? m :item_name) (item-to-line m)
            (contains? m :table_name) (table-to-line m)
            (contains? m :parenthesis) (concat ["("] (token-to-sql ignite group_id (get m :parenthesis)) [")"])
            )))
=> #'core/map-token-to-sql
=> #'core/item-to-line
=> #'core/table-to-line
=> #'core/func-to-line
=> #'core/select-to-sql
=> #'core/token-to-sql
=> #'core/map-token-to-sql
(defn func-to-line [ignite group_id m]
    (if (and (contains? m :alias) (not (nil? (-> m :alias))))
        (concat [(-> m :func-name) "("] (map (partial token-to-sql ignite group_id) (-> m :lst_ps)) [") as "] [(-> m :alias)])
        (concat [(-> m :func-name) "("] (map (partial token-to-sql ignite group_id) (-> m :lst_ps)) [")"])))

(defn map-token-to-sql [ignite group_id m]
    (if (some? m)
        (cond
            (contains? m :sql_obj) (if (not (nil? (get m :sql_obj))) (select-to-sql ignite group_id (get m :sql_obj)) (throw (Exception. "select 语句错误！")))
            (and (contains? m :func-name) (contains? m :lst_ps)) (func-to-line ignite group_id m)
            (contains? m :and_or_symbol) (get m :and_or_symbol)
            (contains? m :comparison_symbol) (get m :comparison_symbol)
            (contains? m :in_symbol) (get m :in_symbol)
            (contains? m :operation_symbol) (get m :operation_symbol)
            (contains? m :comma_symbol) (get m :comma_symbol)
            (contains? m :item_name) (item-to-line m)
            (contains? m :table_name) (table-to-line m)
            (contains? m :parenthesis) (concat ["("] (token-to-sql ignite group_id (get m :parenthesis)) [")"])
            )))
=> #'core/func-to-line
=> #'core/map-token-to-sql
(token-to-sql ignite 1 {:func-name "myInvoke",
                        :lst_ps '({:table_alias "", :item_name "'func_a'", :item_type "", :java_item_type "String", :const true}
                                  {:comma_symbol ","}
                                  {:func-name "dafu", :lst_ps '({:item_name "ID", :table_alias "m_c_t", :const false})})})
=> ("myInvoke" "(" nil "," ("dafu" "(" nil nil ")") ")")