(require
    '[org.gridgain.plus.ddl.my-create-table :as my-create-table]
    '[org.gridgain.plus.ddl.my-alter-table :as my-alter-table]
    '[org.gridgain.plus.ddl.my-create-index :as my-create-index]
    '[org.gridgain.plus.ddl.my-drop-index :as my-drop-index]
    '[org.gridgain.plus.ddl.my-drop-table :as my-drop-table]
    '[org.gridgain.plus.ddl.my-create-dataset :as my-create-dataset]
    '[org.gridgain.plus.ddl.my-alter-dataset :as my-alter-dataset]
    '[org.gridgain.plus.ddl.my-drop-dataset :as my-drop-dataset]
    '[org.gridgain.plus.dml.my-select :as my-select]
    '[org.gridgain.plus.dml.my-select-plus :as my-select-plus]
    '[org.gridgain.plus.dml.my-insert :as my-insert]
    '[org.gridgain.plus.dml.my-update :as my-update]
    '[org.gridgain.plus.dml.my-delete :as my-delete]
    '[org.gridgain.plus.dml.my-trans :as my-trans]
    '[org.gridgain.plus.dml.select-lexical :as my-lexical]
    '[org.gridgain.plus.dml.my-expression :as my-expression]
    '[org.gridgain.plus.context.my-context :as my-context]
    '[org.gridgain.plus.init.plus-init-sql :as plus-init-sql]
    '[org.gridgain.plus.init.plus-init :as plus-init]
    '[org.gridgain.plus.tools.my-util :as my-util]
    '[clojure.core.reducers :as r]
    '[clojure.string :as str]
    '[clojure.walk :as w])
(import (org.apache.ignite Ignite IgniteCache)
        (org.apache.ignite.internal IgnitionEx)
        (com.google.common.base Strings)
        (cn.plus.model MyCacheEx MyKeyValue MyLogCache SqlType MyLog)
        (org.tools MyConvertUtil KvSql)
        (cn.plus.model MyCacheEx MyKeyValue MyLogCache SqlType DdlLog DataSetDdlLog)
        (cn.plus.model.ddl MyDataSet MyDatasetTable MyDatasetRealTable MyDatasetTablePK MyDeleteViews MyInsertViews MySelectViews MyTable MyTableIndex MyTableIndexItem MyTableItem MyTableItemPK MyTableObj MyUpdateViews MyViewObj ViewOperateType ViewType)
        (org.gridgain.dml.util MyCacheExUtil)
        (cn.plus.model.db MyScenesCache)
        (org.apache.ignite.configuration CacheConfiguration)
        (org.apache.ignite.cache CacheMode CacheAtomicityMode)
        (org.apache.ignite.cache.query FieldsQueryCursor SqlFieldsQuery)
        (org.apache.ignite.binary BinaryObjectBuilder BinaryObject)
        (org.gridgain.ddl MyCreateTableUtil MyDdlUtil)
        (java.util List ArrayList Date Iterator)
        (java.sql Timestamp)
        (java.math BigDecimal)
        (org.tools MyTools)
        (org.gridgain MyParamsUtil)
        )

(def ignite (IgnitionEx/start "/Users/chenfei/Documents/Java/MyGridGain/my-grid-plus/resources/default-config.xml"))

1、删除所有元数据表
(defn dorp-tables [[f & r] ignite]
    (if (some? f)
        (do
            (.getAll (.query (.cache ignite "my_meta_table") (SqlFieldsQuery. f)))
            (recur r ignite))))

(dorp-tables plus-init-sql/my-un-grid-tables ignite)
(def lst (plus-init/get-code-lst plus-init-sql/my-grid-tables))
(def meta_cache (plus-init/get_meta_cache ignite))

2、初始化所有元表
(plus-init/my-initialization ignite)

; 测试 ddl
1、创建一个名为 admin 的用户组，该用户组拥有对实时数据集操作 DDL 和 DML 的权限
insert into my_users_group (group_name, group_type) values ('admin', 'ALL');

(insert_users_group ignite (my-insert/get_insert_obj ignite "insert into my_users_group (data_set_id, group_name, group_type) values (1, 'admin', 'ALL')"))
(insert_data_set ignite (my-insert/get_insert_obj ignite "insert into my_dataset (id, is_real, dataset_name) values (1, 1, 'real_ds')"))

对场景来说保存 object 就可以，用的时候在生成相应的方法

insert 保存 insert_obj

执行 my-create-table 生成表



(my-insert-0/get_insert_obj (my-lexical/to-back "insert into Categories values(1,'Beverages','Soft drinks, coffees, teas, beers, and ales', '')"))
=> nil
(my-insert-0/get_insert_obj (my-lexical/to-back "insert into Categories (CategoryID, CategoryName, Description, Picture) values (1,'Beverages','Soft drinks, coffees, teas, beers, and ales', '')"))
=>

(def items (my-lexical/to-back "insert into Categories values(1,'Beverages','Soft drinks, coffees, teas, beers, and ales', '')"))
=> #'core/items

(my-create-table/my_create_table ignite 0 "categories" "" "CREATE TABLE IF NOT EXISTS Categories (\n     -- 产品类型ID\n    CategoryID INTEGER NOT NULL,\n    -- 产品类型名\n    CategoryName VARCHAR(15) NOT NULL,\n    -- 类型说明\n    Description VARCHAR,\n    -- 产品样本\n    Picture VARCHAR,\n    PRIMARY KEY (CategoryID)\n) WITH \"template=manage\"")
(my-create-table/my_create_table ignite 0 "orderdetails" "" "CREATE TABLE OrderDetails (\n    -- 订单编号\n    OrderID INTEGER NOT NULL comment('订单编号'),\n    -- 产品编号\n    ProductID INTEGER NOT NULL comment('产品编号'),\n    -- 单价\n    UnitPrice DECIMAL(10,4) NOT NULL DEFAULT 0 comment('单价'),\n    -- 订购数量\n    Quantity SMALLINT(2) NOT NULL DEFAULT 1 comment('订购数量'),\n    -- 折扣\n    Discount REAL NOT NULL DEFAULT 0 comment('折扣'),\n    PRIMARY KEY (OrderID, ProductID)\n) WITH \"template=manage\"")

(my-insert/insert_run_log ignite 1 "INSERT INTO OrderDetails Values (10248, 11, 14, 12, 0.0)")

(def sql "INSERT INTO Categories VALUES(1,'Beverages','Soft drinks, coffees, teas, beers, and ales', '')")
=> #'core/sql
(def insert_obj (my-insert/get_insert_obj ignite sql))
=> #'core/insert_obj
(my-insert/get_pk_data ignite (-> insert_obj :table_name))
=> {:pk [], :data []}
(my-insert/get_insert_obj ignite sql)

(def sql "INSERT INTO Categories VALUES(1,'Beverages','Soft drinks, coffees, teas, beers, and ales', '')")

(def insert_obj (my-insert/get_insert_obj ignite sql))

(my-insert/get_pk_data ignite (-> insert_obj :table_name))
=> #'core/sql
=> #'core/insert_obj
=>
{:pk ({:column_name "categoryid", :column_type "integer", :pkid true, :auto_increment false}),
 :data ({:column_name "categoryname", :column_type "varchar", :pkid false, :auto_increment false}
        {:column_name "description", :column_type "varchar", :pkid false, :auto_increment false}
        {:column_name "picture", :column_type "varchar", :pkid false, :auto_increment false})}
(def pk_data (my-insert/get_pk_data ignite (-> insert_obj :table_name)))
=> #'core/pk_data
(def pk_with_data (my-insert/get_pk_data_with_data pk_data insert_obj))
=> #'core/pk_with_data
(println pk_with_data)
{:pk_rs [{:column_name categoryid, :column_type integer, :pkid true, :auto_increment false, :item_value 1}], :data_rs [{:column_name categoryname, :column_type varchar, :pkid false, :auto_increment false, :item_value 'Beverages'} {:column_name description, :column_type varchar, :pkid false, :auto_increment false, :item_value 'Soft drinks, coffees, teas, beers, and ales'} {:column_name picture, :column_type varchar, :pkid false, :auto_increment false, :item_value ''}]}
=> nil
(my-insert/get_pk_data_with_data pk_data insert_obj)
=>
{:pk_rs [{:column_name "categoryid", :column_type "integer", :pkid true, :auto_increment false, :item_value "1"}],
 :data_rs [{:column_name "categoryname",
            :column_type "varchar",
            :pkid false,
            :auto_increment false,
            :item_value "'Beverages'"}
           {:column_name "description",
            :column_type "varchar",
            :pkid false,
            :auto_increment false,
            :item_value "'Soft drinks, coffees, teas, beers, and ales'"}
           {:column_name "picture", :column_type "varchar", :pkid false, :auto_increment false, :item_value "''"}]}
(my-insert/insert_obj_to_db ignite (-> insert_obj :table_name) pk_with_data)
Execution error (ArityException) at org.gridgain.plus.dml.my-insert/insert-obj-to-db$get-data-rs (my_insert.clj:302).
Wrong number of args (2) passed to: org.gridgain.plus.dml.my-insert/insert-obj-to-db/get-binaryObject--323
(def pk_with_data (my-insert/get_pk_data_with_data pk_data insert_obj))
=> #'core/pk_with_data
(my-insert/insert_obj_to_db ignite (-> insert_obj :table_name) pk_with_data)




(def sql "INSERT INTO Categories VALUES(1,'Beverages','Soft drinks, coffees, teas, beers, and ales', '')")
(def sql "INSERT INTO Categories (CategoryID, CategoryName, Description, Picture) VALUES(1,'Beverages','Soft drinks, coffees, teas, beers, and ales', f('wudafu'))")
(def insert_obj (my-insert/get_insert_obj ignite sql))
(def pk_data (my-insert/get_pk_data ignite (-> insert_obj :table_name)))
(def pk_with_data (my-insert/get_pk_data_with_data pk_data insert_obj))
(def data_rs (-> pk_with_data :data_rs))
(println (my-lexical/get_jave_vs (-> (last data_rs) :column_type) (my-insert/get_plus_value ignite (-> (last data_rs) :item_value))))

(my-insert/insert_obj_to_db ignite (-> insert_obj :table_name) pk_with_data)

(def obj (my-update-0/get-authority ignite 1 "update categories set categoryname = '瓜子' where description = '喝的'"))
(my-update-0/get_update_query_sql ignite obj)
































